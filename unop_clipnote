eoddate backup source:
https://pypi.org/project/eoddata-client/#history
https://medium.com/python-data/quandl-getting-end-of-day-stock-data-with-python-8652671d6661
http://www.csidata.com/factsheets.php?type=stock&format=html&exchangeid=AMEX

Feb9
1. stat_view label on y-axis
https://stackoverflow.com/questions/49237522/annotate-end-of-lines-using-python-and-matplotlib
2. etf risk gauge
https://etfdb.com/etf-education/understanding-etf-s-total-cost-of-ownership/



jan.21@hm
1. review R-stat 
2. data strucutre
3. play strategy c1-10 table to see validate/ back testing
4. 

Jan.22
@ Priority:
0. flask input( spec/candy/trd ->enforce data validty check: dt, 
   data_check(): flask input, web status ready, before daily routine
   flow: 
   data_check(), backup_db()
   daily: 	spec_candy(s_list)-> @spec_edit 
			@trd_edit -> track_raw
		
   if trd_entry:  trd_candy(t_list)-> @candy_edit ->trd_entry()
  

1. intel - iv_rank, ear_dt, leads: repeat, stk_vol move, sec rotate/top/botom, LCS

2. track - simple/all ast
3. spike profile plot/quantify
4. Flask - table, 
5. bc_etf

@ candy_action:
. bc _etf/inx 
6. Flask_ track view (easier)
7. earn_dt, div_dt ("re.search('(\d{1,2}-\d{2}-\d{4})',e1).group(0)")

@ spike:
1. plot_all (earn_dt, div_dt, ma, opt_vol, stk_vol, iv, hv)
2. hv_20/60 overlay: agree? trend, mark iv_30
3. spike_7 day (or cust)
4. spike_quantify: well behave, 2_std_window?
5. hv/iv overlay: hv pattern? hv to predict iv valuation->decide play/expire
(mc.com iv 1 year chart)

MAIN
1. FIX - get_earning_ec
2. FIX - get_op (IV rank, chart)
2. Data integrity - Alchemy
3. FLASK - display table
4. Intel - Spike/ HV profile -> pattern
5. Vol arb - IV map HV / HV predict
6. Auto - dnld/ Cloud
7. new info: twit/news/ <avoid surprise>
8. insider
9. fundamental: leverage info.
10. barometer: fx/etf
11.ideas: BB monthy?

@track_raw():
Fix get _op to get iv rank


Resource:
https://pandas.pydata.org/pandas-docs/stable/cookbook.html
MAIN
1. FIX - get_earning_ec
2. FIX - get_op (IV rank, chart)
2. Data integrity - Alchemy
3. FLASK - display table
4. Intel - Spike/ HV profile -> pattern
5. Vol arb - IV map HV / HV predict
6. Auto - dnld/ Cloud

@home
1. trd_to_candy (also from tbl_spec_candy
2. candy_to_trd (flask template: candy_main update to tbl_c? append)
3. intel (bc/mc -> filter high p, c, or p/c coexit, remove sweep b/s logic)


a. add field "way","pc" to tbl_c
b. update pc,way, lsn, note in tbl_c via flask
c. update R-track.py
d. fix R-track bug
e. update tgt_dt, tgt_p (per spike_profile check)
f. R-track: con_exit_no_change (tgt_dt passed spike freq expected)
g. spike check for LP: TRGP, GPS, CMCSA (catalyst, spike profile)

mc , bc (call %, ingore last price? so b/s does not matter)


TASK:
0. FIX intel-lame
1. track_raw() - error cap, str float
2. candy_template fix
3. mc_intel, untel (too many lame)
4. spike_profile
5. bc _etf/inx 
6. Flask_ track view (easier)
7. earn_dt, div_dt (substring fix)

MAIN
1. FIX - get_earning_ec
2. FIX - get_op (IV rank, chart)
2. Data integrity - Alchemy
3. FLASK - display table
4. Intel - Spike/ HV profile -> pattern
5. Vol arb - IV map HV / HV predict
6. Auto - dnld/ Cloud

Resource:
https://pandas.pydata.org/pandas-docs/stable/cookbook.html

@copy db daily
from shutil import copyfile
db_source=r"C:\Users\qli1\BNS_wspace\flask\f_trd.db"
db_dest=r"C:\Users\qli1\BNS_wspace\flask\f_trd_bkup.db"
copyfile(db_source, db_dest)

@webpage ready:
import requests
urls=["https://marketchameleon.com/Reports/UnusualOptionVolumeReport", ]
def url_ok(urls):
	for url in urls:
		r = requests.head(url)
		print(url, r.status_code == 200)

@track
a=da.groupby('act')['pct'].sum()
b=da.groupby('act')['value'].sum()
z=list(zip(a,b)
pd.DataFrame(z,columns=['pct','value'],index=a.index)
